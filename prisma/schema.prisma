generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum AuthProvider {
  EMAIL
  KAKAO
  NAVER
  GOOGLE
  APPLE
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  email           String        @unique  // 이메일을 필수로 변경
  hashed_password String        // 비밀번호를 필수로 변경
  isComplete      Boolean       @default(false)
  
  name            String?
  gender          String?
  age             Int?
  
  profile_image   String?
  bio             String?
  is_verified     Boolean       @default(false)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  // 소셜 로그인 정보
  social_connections SocialConnection[]
  
  // 인증 토큰
  auth_tokens     AuthToken[]
  
  // 관계
  created_courses DateCourse[]  @relation("CreatedCourses")
  saved_courses   SavedCourse[]
  reviews         Review[]
}

model SocialConnection {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  user_id         String        @db.ObjectId
  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  provider        AuthProvider
  provider_user_id String       // 외부 서비스에서의 사용자 ID
  provider_data   Json?         // 제공자로부터 받은 추가 데이터
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  @@index([user_id])
}

model AuthToken {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  user_id         String        @db.ObjectId
  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  refresh_token   String        @unique
  access_token    String?
  device_info     String?
  ip_address      String?
  expires_at      DateTime
  is_revoked      Boolean       @default(false)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  @@index([user_id, refresh_token])
}

// 나머지 모델은 동일하게 유지
model DateCourse {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  creator_id      String        @db.ObjectId
  creator         User          @relation("CreatedCourses", fields: [creator_id], references: [id])
  thumbnail       String
  tags            String[]
  price           Int
  total_time      Int?
  total_distance  Int?
  is_public       Boolean       @default(true)
  view_count      Int           @default(0)
  like_count      Int           @default(0)
  rating          Float         @default(0)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  is_recommend    Boolean       @default(false)



  places          CoursePlaces[]
  saved_by        SavedCourse[]
  reviews         Review[]
}

model Place {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  address         String
  road_address    String?
  latitude        Float
  longitude       Float
  category        String
  naver_place_id  String?       @unique
  naver_category  String?
  phone           String?
  homepage        String?
  business_hours  Json?
  description     String?
  thumbnail       String?
  naver_rating    Float?
  naver_review_count Int?       @default(0)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  course_places   CoursePlaces[]
}

model CoursePlaces {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  course_id       String        @db.ObjectId
  course          DateCourse    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  place_id        String        @db.ObjectId
  place           Place         @relation(fields: [place_id], references: [id])
  visit_order     Int
  recommended_time Int?
  tips            String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  @@unique([course_id, visit_order])
}

model SavedCourse {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  user_id         String        @db.ObjectId
  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course_id       String        @db.ObjectId
  course          DateCourse    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  saved_at        DateTime      @default(now())
  
  @@unique([user_id, course_id])
}

model Review {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  course_id       String        @db.ObjectId
  course          DateCourse    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user_id         String        @db.ObjectId
  user            User          @relation(fields: [user_id], references: [id])
  rating          Int
  comment         String?
  visited_date    DateTime?
  images          ReviewImage[]
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  @@unique([user_id, course_id])
}

model ReviewImage {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  review_id       String        @db.ObjectId
  review          Review        @relation(fields: [review_id], references: [id], onDelete: Cascade)
  image_url       String
  created_at      DateTime      @default(now())
}